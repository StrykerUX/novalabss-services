// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Required tables
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?   // Para autenticación con credenciales
  accounts      Account[]
  sessions      Session[]
  
  // NovaLabs specific fields
  role          Role      @default(USER)
  phone         String?
  company       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  projects      Project[]
  onboardingResponse OnboardingResponse?
  
  // Campos para auto-login temporal
  autoLoginToken       String?
  autoLoginTokenExpiry DateTime?
}

enum Role {
  USER
  ADMIN
}

model Project {
  id            String    @id @default(cuid())
  name          String
  status        ProjectStatus @default(EN_DESARROLLO)
  progress      Int       @default(0)
  currentPhase  String?
  estimatedDelivery String?
  plan          String    @default("Rocket")
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  onboardingResponse OnboardingResponse?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ProjectStatus {
  EN_DESARROLLO
  EN_REVISION
  EN_ACTUALIZACION
  EN_MANTENIMIENTO
  COMPLETADO
}

model OnboardingResponse {
  id          String   @id @default(cuid())
  userId      String   @unique
  projectId   String   @unique
  
  // Respuestas organizadas por categorías
  businessInfo      String?  // JSON con información del negocio
  objectives        String?  // JSON con objetivos y audiencia
  contentArchitecture String? // JSON con páginas y contenido
  brandDesign       String?  // JSON con diseño y colores
  technicalSetup    String?  // JSON con dominio y hosting
  projectPlanning   String?  // JSON con timeline y entregables
  
  // Metadatos
  completedSteps    String?  // JSON array de pasos completados
  completionStatus  OnboardingStatus @default(PENDING)
  submittedAt       DateTime?
  
  // Relaciones
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project  Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OnboardingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}